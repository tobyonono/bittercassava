'use strict'

var AtatusHTTPClient = require('./http-client')

function Transporter(agent) {
  this.agent = agent

  this._methods = {
    hostInfo: new AtatusHTTPClient('hostinfo', agent),
    transactions: new AtatusHTTPClient('txn', agent),
    errorEvents: new AtatusHTTPClient('error', agent),
    errorMetrics: new AtatusHTTPClient('error_metric', agent),
    traces: new AtatusHTTPClient('trace', agent),
    metrics: new AtatusHTTPClient('metric', agent),
  }
}

Transporter.prototype.sendHostInfo = function sendHostInfo(callback) {
  var agent = this.agent

  var payload = {
    environment: {
      node_modules: agent._conf.dependencies || {},

      settings: {
        nodejs: agent._conf.nodeVersion,
        framework: agent._conf.frameworkName,
        frameworkVersion: agent._conf.frameworkVersion,
        agentVersion: agent._conf.agentVersion,
        appName: agent._conf.appName,
        environment: agent._conf.environment,
        logLevel: agent._conf.logLevel,
        metricsInterval: agent._conf.metricsInterval,
        traceThreshold: agent._conf.traceThreshold,
        captureExceptions: agent._conf.captureExceptions,
        asyncHooks: agent._conf.asyncHooks,
        ignoreStatusCodes: agent._conf.ignoreStatusCodes,
        // serverTimeout: agent._conf.serverTimeout,
      },

      host: agent._conf.hostDetails || {}
    },
    timestamp: Date.now()
  }

  payload.environment.host.containerId = agent._conf.containerId;
  payload.environment.host.version = payload.environment.host.release;

  this._methods.hostInfo.request(payload, function cb_invoke(error, config, body) {

    if (error) return callback(error, config, body)

    callback(null, config, body)
  })
}


Transporter.prototype.send = function send(name, body, callback) {
  if (this.agent._conf.blocked) {
    this.agent.logger.error('Sending data to Atatus is blocked. Contact us!')
    return callback(null)
  }

  let agent = this.agent

  this._methods[name].request(body, function requestHandler(error, returned, json) {

    if (!error) return callback(error, returned, json)

    agent.logger.error(
        error,
        "Sending data to Atatus failed: ",
        name,
        error.class || ''
      )
    return callback(error, returned, json)
  })
}


module.exports = Transporter
