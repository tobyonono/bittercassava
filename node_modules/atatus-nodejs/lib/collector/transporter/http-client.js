'use strict'

var request = require('request')
var util = require('util')

var AtatusHTTPClient = module.exports = function (name, agent) {
  this.name = name
  this.agent = agent
}

AtatusHTTPClient.prototype.getCommonInfo = function () {
  let conf = this.agent._conf
  let info = {
    appName: conf.appName,
    licenseKey: conf.licenseKey,
    apiKey: conf.apiKey,

    uniqueHostname: (conf.hostDetails && conf.hostDetails.bootId) || conf.hostname,
    hostname: conf.hostname,
    containerId: conf.containerId,
    version: conf.appVersion,
    releaseStage: conf.environment,

    agent: {
      name: conf.agentName,
      version: conf.agentVersion
    },

    tags: conf.tags,
    customData: conf.customData
  }

  return info
}
AtatusHTTPClient.prototype.request = function (body, cb) {

  let url = this.agent._conf.serverUrl + this.name
  let agent = this.agent

  let payload = Object.assign(
    body,
    this.getCommonInfo()
  )

  this.agent.logger.debug('Sending to Atatus: ', url, JSON.stringify(payload, null, 4));
  // console.log('Sending to Atatus: ', this.name, url, JSON.stringify(payload, null, 4))

  let options = {
      method: 'POST',
      url: url,
      proxy: this.agent._conf.proxy,
      body: payload,
      json: true,
      headers: {
          'accept-encoding' : 'gzip,deflate',
          'User-Agent': this.agent._conf.userAgent
      },
      gzip: true
  };

  request.post(options, function(err, res, body) {

      if (err) {
        return cb(err);
      }

      body = body || {}

      if (res.statusCode >= 200 && res.statusCode < 300) {
        agent._conf.blocked = false
        return cb(null, body);
      }

      if (res.statusCode === 400 && body.blocked) {
        agent._conf.blocked = true
      }
      return cb(new Error(body.errorMessage || body.error || 'Request Failed!'))
  });
}
