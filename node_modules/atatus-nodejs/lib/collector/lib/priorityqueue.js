'use strict'

let PriorityQueue = require('js-priority-queue')

function durationComparer(item1, item2) {
  if (item1.duration < item2.duration) {
    return -1;
  }
  if (item1.duration > item2.duration) {
    return 1;
  }
  return 0;
}

function LimitedPriorityQueue(limit, comparator) {
  this.limit = limit || 10;
  this.comparator = comparator || durationComparer;
  this.data = new PriorityQueue({ strategy: PriorityQueue.BinaryHeapStrategy, comparator: this.comparator });

  Object.defineProperty(this, 'length', {
    get: function getLength() {
      return this.data.length
    }
  })
}

LimitedPriorityQueue.prototype.add = function add(item) {

  if (this.length >= this.limit) {
    // Returns the smallest item in the queue and removes it from the queue
    this.data.dequeue();
  }

  // Inserts a new value in the queue
  this.data.queue(item)
}

LimitedPriorityQueue.prototype.clear = function () {
  this.data = new PriorityQueue({ strategy: PriorityQueue.BinaryHeapStrategy, comparator: this.comparator });
  // this.data.clear();
}

LimitedPriorityQueue.prototype.toArray = function toArray() {
  return this.data.priv.data
}

LimitedPriorityQueue.prototype.setLimit = function setLimit(newLimit) {
  this.limit = newLimit
  while (this.length > newLimit) {
    this.data.dequeue()
  }
}

LimitedPriorityQueue.prototype.merge = function merge(items) {
  if (!items || !items.length) {
    return
  }

  for (let i = 0; i < items.length; ++i) {
    this.add(items[i]);
  }
}

module.exports = LimitedPriorityQueue;