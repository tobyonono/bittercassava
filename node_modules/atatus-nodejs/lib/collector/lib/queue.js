'use strict'

function Queue(limit) {
  this.limit = limit || 10
  this.data = []

  Object.defineProperty(this, 'length', {
    get: function getLength() {
      return this.data.length
    }
  })
}

Queue.prototype.add = function add(item) {
  if (this.length < this.limit) {
    this.data.push(item)
  } else {
    let toReplace = Math.floor(Math.random() * (this.length + 2))
    if (toReplace < this.limit) this.data[toReplace] = item
  }
}

Queue.prototype.toArray = function toArray() {
  return this.data
}

Queue.prototype.merge = function merge(items) {

  if (!items || !items.length) {
    return
  }

  if (items === this.data) {
    return
  }

  for (let i = 0; i < items.length; i++) {
    this.add(items[i])
  }
}

Queue.prototype.setLimit = function setLimit(newLimit) {
  this.limit = newLimit
  if (this.data.length > newLimit) {
    this.data = this.data.slice(0, newLimit)
  }
}

Queue.prototype.clear = function () {
  this.data = []
  // this.data.clear();
}

module.exports = Queue
