'use strict'

const os = require('os')
const util = require('util')
const path = require('path')
const parseUrl = require('url').parse
const getContainerInfo = require('container-info')
const findPackageJson = require('./lib/find-package-json')
const sysinfo = require('./lib/sysinfo')

const Aggregator = require('./aggregator')
const Reporter = require('./reporter')

const flush = Symbol('flush')
const hostname = os.hostname()
const containerInfo = getContainerInfo.sync()
// const node8 = process.version.indexOf('v8.') === 0

module.exports = Collector

function Collector (agent) {
  if (!(this instanceof Collector)) return new Collector(agent)

  this.agent = agent
  this.config(agent)

  this.aggregator = new Aggregator(agent)
  this.reporter = new Reporter(agent, this.aggregator)
}

Collector.prototype.start = function () {
  this.reporter.start(() => {});
}

Collector.prototype.destroy = function () {
  this.reporter.stop(() => {});
}

Collector.prototype.config = function (agent) {

  if (!agent._conf.hostname) agent._conf.hostname = hostname

  if (containerInfo) {
    if (!agent._conf.containerId && containerInfo.containerId) {
      agent._conf.containerId = containerInfo.containerId
    }
    if (!agent._conf.kubernetesPodUID && containerInfo.podId) {
      agent._conf.kubernetesPodUID = containerInfo.podId
    }
    if (!agent._conf.kubernetesPodName && containerInfo.podId) {
      agent._conf.kubernetesPodName = hostname
    }
  }

  sysinfo.osInfo(function (osInfo) {
    agent.logger.debug('OS info: ', osInfo)
    agent._conf.hostDetails = osInfo
  })

  try {
    // Find node packages and go deep into previous folders unto 5 levels
    let rootDir = process.argv[1] ? path.dirname(process.argv[1]) : process.cwd()
    let finder = findPackageJson(rootDir)
    for(let i = 0; i < 5; i++) {
      let pkg = finder.next()
      if (pkg.value) {
        agent._conf.dependencies = pkg.value.dependencies
        break;
      }
      if (pkg.done) {
        break;
      }
    }
  } catch (e) {
  }

}

Collector.prototype.sendSpan = function (span, cb) {
  this.agent.logger.debug('Adding Span: ', util.inspect(span, { depth: null }))
  this.aggregator.addSpan(span)
}

Collector.prototype.sendTransaction = function (transaction, cb) {
  if (transaction.name.indexOf('static file') !== -1) {
    return;
  }

  this.agent.logger.debug('Adding Transaction: ', util.inspect(transaction, { depth: null }))

  let statusCode = transaction.context &&
                   transaction.context.response &&
                   transaction.context.response.status_code

  if (statusCode >= 400 && this.agent._conf.ignoreStatusCodes.indexOf(statusCode) === -1) {
    this.aggregator.addErrorMetrics(statusCode, transaction)
  }

  this.aggregator.addTxn(transaction)
}

Collector.prototype.sendError = function (error, cb) {
  this.agent.logger.debug('Adding Error: ', util.inspect(error, {depth: null}))
  this.aggregator.addErrorEvents(error)
}

Collector.prototype.sendMetricSet = function (metricset, cb) {
    this.agent.logger.debug('Adding metric set: ', metricset)
    this.aggregator.addMetric(metricset)
}

